#define WIN32_LEAN_AND_MEAN
#define WIN32_EXTRA_LEAN

// SDL2 Headers
#include <SDL.h>
<<<<<<< HEAD
||||||| merged common ancestors
#include <SDL_image.h>		// For loading other images than bmp
#include <stdio.h>
#include <string>
#include <chrono>
#include "LTexture.h"
#include "AnimatedTexture.h"
=======
#include <SDL_image.h>		// For loading other images than bmp
#include <stdio.h>
#include <string>
#include <chrono>
#include "LTexture.h"
#include "AnimatedTexture.h"
#include "Input.h"
#include "Controller.h"
>>>>>>> Input_Manager

#include "cSDL2WNDManager.h"
#include "cGame.h"

using namespace std;

<<<<<<< HEAD
//This is the SDL window
static cSDL2WNDManager* pgmWNDMgr = cSDL2WNDManager::getInstance();
||||||| merged common ancestors
//Key press surfaces constants 
enum KeyPressSurfaces
{
	KEY_PRESS_SURFACE_DEFAULT,
	KEY_PRESS_SURFACE_UP,
	KEY_PRESS_SURFACE_DOWN,
	KEY_PRESS_SURFACE_LEFT,
	KEY_PRESS_SURFACE_RIGHT,
	KEY_PRESS_SURFACE_TOTAL
};


//Starts up SDL and creates window
bool init();
//Loads media 
bool loadMedia();
//Frees media and shuts down SDL
void close();
// Returns the seconds since the last frame.
double getElapsedSeconds();


//The window we'll be rendering to 
SDL_Window* gWindow = NULL;
//The window renderer 
SDL_Renderer* gRenderer = NULL;
//Scene textures 
AnimatedTexture gAnimatedTexture_up;
AnimatedTexture gAnimatedTexture_down;
AnimatedTexture gAnimatedTexture_left;
AnimatedTexture gAnimatedTexture_right;
//Time when the last frame was drawn
time_point< high_resolution_clock > lastTime;




int main(int argc, char* args[]) {		// SLD requires a main with these types of arguments

										//Start up SDL and create window 
	if (!init())
	{
		printf("Failed to initialize!\n");
	}
	else
	{
		//Load media 
		if (!loadMedia())
		{
			printf("Failed to load media!\n");
		}
		else
		{


			//Main loop flag 
			bool quit = false;
			//Event handler 
			SDL_Event e;

			int time = 0;

			//While application is running 
			while (!quit) {
				double elapsedTime = getElapsedSeconds();

				//Handle events on queue 
				while (SDL_PollEvent(&e) != 0) // polls an event from the event queue and puts it into e (the union we created before)
				{
					//User requests quit 
					if (e.type == SDL_QUIT)
					{
						quit = true;
					}
					else if (e.type == SDL_KEYDOWN)
					{
						// Switching off all animations,
						// to then switch on the right one only.
						gAnimatedTexture_up.play(false);
						gAnimatedTexture_down.play(false);
						gAnimatedTexture_left.play(false);
						gAnimatedTexture_right.play(false);

						//Select surfaces based on key press 
						switch (e.key.keysym.sym)
						{
						case SDLK_UP:
							gAnimatedTexture_up.play(true);
							break;
						case SDLK_DOWN:
							gAnimatedTexture_down.play(true);
							break;
						case SDLK_LEFT:
							gAnimatedTexture_left.play(true);
							break;
						case SDLK_RIGHT:
							gAnimatedTexture_right.play(true);
							break;
						default:

							break;
						}
					}
				}

				// Update objects
				gAnimatedTexture_up.update(elapsedTime);
				gAnimatedTexture_down.update(elapsedTime);
				gAnimatedTexture_left.update(elapsedTime);
				gAnimatedTexture_right.update(elapsedTime);

				//Clear screen 
				SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);
				SDL_RenderClear(gRenderer);
=======
//Key press surfaces constants 
enum KeyPressSurfaces
{
	KEY_PRESS_SURFACE_DEFAULT,
	KEY_PRESS_SURFACE_UP,
	KEY_PRESS_SURFACE_DOWN,
	KEY_PRESS_SURFACE_LEFT,
	KEY_PRESS_SURFACE_RIGHT,
	KEY_PRESS_SURFACE_TOTAL
};


//Starts up SDL and creates window
bool init();
//Loads media 
bool loadMedia();
//Frees media and shuts down SDL
void close();
// Returns the seconds since the last frame.
double getElapsedSeconds();


//The window we'll be rendering to 
SDL_Window* gWindow = NULL;
//The window renderer 
SDL_Renderer* gRenderer = NULL;
//Scene textures 
AnimatedTexture gAnimatedTexture_up;
AnimatedTexture gAnimatedTexture_down;
AnimatedTexture gAnimatedTexture_left;
AnimatedTexture gAnimatedTexture_right;
//Time when the last frame was drawn
time_point< high_resolution_clock > lastTime;




int main(int argc, char* args[]) {		// SLD requires a main with these types of arguments

										//Start up SDL and create window 
	if (!init())
	{
		printf("Failed to initialize!\n");
	}
	else
	{
		//Load media 
		if (!loadMedia())
		{
			printf("Failed to load media!\n");
		}
		else
		{


			//Main loop flag 
			bool quit = false;
			//Event handler 
			SDL_Event e;

			int time = 0;


			//Creating test controllers
			Controller testController_1(1);
			Controller testController_2(2);

			//Registering the test controller to an input channel.
			Input::RegisterChannelListener(&testController_1, 0);
			Input::RegisterChannelListener(&testController_2, 1);

			//Registering the keyboard as input for the firts two channels
			//TODO handle device registration within the input manager
			Input::RegisterDevice(KEYBOARD_WASD, 0);
			Input::RegisterDevice(KEYBOARD_ARROWS, 1);




			//While application is running 
			while (!quit) {
				double elapsedTime = getElapsedSeconds();

				//Handle events on queue 
				while (SDL_PollEvent(&e) != 0) // polls an event from the event queue and puts it into e (the union we created before)
				{
					//User requests quit 
					if (e.type == SDL_QUIT)
					{
						quit = true;
					}
					Input::SDLEventIn(e);
				}

				// Update objects
				gAnimatedTexture_up.update(elapsedTime);
				gAnimatedTexture_down.update(elapsedTime);
				gAnimatedTexture_left.update(elapsedTime);
				gAnimatedTexture_right.update(elapsedTime);

				//Clear screen 
				SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);
				SDL_RenderClear(gRenderer);
>>>>>>> Input_Manager

//This is the our Game
static cGame* theGame = cGame::getInstance();

int main(int argc, char *argv[])
{
	if (!pgmWNDMgr->initWND(WINDOW_TITLE, WINDOW_WIDTH, WINDOW_HEIGHT))
		return -1;

	theGame->initialise(pgmWNDMgr->getSDLWindow(), pgmWNDMgr->getSDLRenderer());

<<<<<<< HEAD
	theGame->run(pgmWNDMgr->getSDLWindow(), pgmWNDMgr->getSDLRenderer());
||||||| merged common ancestors
				//Initialize PNG loading
				int imgFlags = IMG_INIT_PNG;
				if (!(IMG_Init(imgFlags) & imgFlags))
				{
					printf("SDL_image could not initialize! SDL_image Error: %s\n", IMG_GetError());
					success = false;
				}
			}
		}
	}
	return success;
}



bool loadMedia()
{
	//Loading success flag 
	bool success = true;


	//Load sprite sheet texture 
	if (!gAnimatedTexture_up.loadFromFile("Images/Charactervector.png", 4, 4, 4, 4))
	{
		printf("Failed to load sprite sheet texture!\n");
		success = false;
	}
	//Load sprite sheet texture 
	if (!gAnimatedTexture_down.loadFromFile("Images/Charactervector.png", 4, 4, 0, 4))
	{
		printf("Failed to load sprite sheet texture!\n");
		success = false;
	}
	//Load sprite sheet texture 
	if (!gAnimatedTexture_left.loadFromFile("Images/Charactervector.png", 4, 4, 8, 4))
	{
		printf("Failed to load sprite sheet texture!\n");
		success = false;
	}
	//Load sprite sheet texture 
	if (!gAnimatedTexture_right.loadFromFile("Images/Charactervector.png", 4, 4, 12, 4))
	{
		printf("Failed to load sprite sheet texture!\n");
		success = false;
	}

	return success;
}
=======
				//Initialize PNG loading
				int imgFlags = IMG_INIT_PNG;
				if (!(IMG_Init(imgFlags) & imgFlags))
				{
					printf("SDL_image could not initialize! SDL_image Error: %s\n", IMG_GetError());
					success = false;
				}

				//Initialising input management
				if(!Input::Initialise())
				{
					printf("Input could not be initialised.");
					success = false;
				}
			}
		}
	}
	return success;
}



bool loadMedia()
{
	//Loading success flag 
	bool success = true;


	//Load sprite sheet texture 
	if (!gAnimatedTexture_up.loadFromFile("Images/Charactervector.png", 4, 4, 4, 4))
	{
		printf("Failed to load sprite sheet texture!\n");
		success = false;
	}
	//Load sprite sheet texture 
	if (!gAnimatedTexture_down.loadFromFile("Images/Charactervector.png", 4, 4, 0, 4))
	{
		printf("Failed to load sprite sheet texture!\n");
		success = false;
	}
	//Load sprite sheet texture 
	if (!gAnimatedTexture_left.loadFromFile("Images/Charactervector.png", 4, 4, 8, 4))
	{
		printf("Failed to load sprite sheet texture!\n");
		success = false;
	}
	//Load sprite sheet texture 
	if (!gAnimatedTexture_right.loadFromFile("Images/Charactervector.png", 4, 4, 12, 4))
	{
		printf("Failed to load sprite sheet texture!\n");
		success = false;
	}

	return success;
}
>>>>>>> Input_Manager

	theGame->cleanUp(pgmWNDMgr->getSDLWindow());

<<<<<<< HEAD
	return 0;
||||||| merged common ancestors


void close()
{
	//Free loaded images 
	gAnimatedTexture_up.free();
	gAnimatedTexture_down.free();
	gAnimatedTexture_left.free();
	gAnimatedTexture_right.free();

	//Destroy window 
	SDL_DestroyRenderer(gRenderer);
	SDL_DestroyWindow(gWindow);
	gWindow = NULL;
	gRenderer = NULL;
	//Quit SDL subsystems 
	IMG_Quit();
	SDL_Quit();
}




double getElapsedSeconds()
{
	time_point< high_resolution_clock > currentTime = high_resolution_clock::now();
	duration< double > deltaTime = currentTime - lastTime;
	lastTime = currentTime;
	return deltaTime.count();
}


















void LTexture::render(int x, int y, SDL_Rect* clip)
{
	//Set rendering space and render to screen 
	SDL_Rect renderQuad = { x, y, mWidth, mHeight };

	//Set clip rendering dimensions 
	if (clip != NULL)
	{
		renderQuad.w = clip->w; renderQuad.h = clip->h;
	}
	//Render to screen 
	SDL_RenderCopy(gRenderer, mTexture, clip, &renderQuad);
=======


void close()
{
	//Free loaded images 
	gAnimatedTexture_up.free();
	gAnimatedTexture_down.free();
	gAnimatedTexture_left.free();
	gAnimatedTexture_right.free();

	//Destroy window 
	SDL_DestroyRenderer(gRenderer);
	SDL_DestroyWindow(gWindow);
	gWindow = NULL;
	gRenderer = NULL;

	//Quit input manager
	Input::Quit();

	//Quit SDL subsystems 
	IMG_Quit();
	SDL_Quit();
}




double getElapsedSeconds()
{
	time_point< high_resolution_clock > currentTime = high_resolution_clock::now();
	duration< double > deltaTime = currentTime - lastTime;
	lastTime = currentTime;
	return deltaTime.count();
}


















void LTexture::render(int x, int y, SDL_Rect* clip)
{
	//Set rendering space and render to screen 
	SDL_Rect renderQuad = { x, y, mWidth, mHeight };

	//Set clip rendering dimensions 
	if (clip != NULL)
	{
		renderQuad.w = clip->w; renderQuad.h = clip->h;
	}
	//Render to screen 
	SDL_RenderCopy(gRenderer, mTexture, clip, &renderQuad);
>>>>>>> Input_Manager
}


//TODO test by recreating previous animation player in new framework
//TODO document changes